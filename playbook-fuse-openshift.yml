---
- hosts: localhost
  name: "Instalação da rota no FIS no Openshift"
  become: true
  connection: local

  vars:
    no_proxy: localhost,127.0.0.1

  vars_prompt:
    - name: "proxy_http"
      prompt: "Digite o proxy com usuário e senha (Exemplo: http://usuario:senha@proxy.com.br)"
    - name: "proxy_https"
      prompt: "Proxy https"

  environment:
    http_proxy: "{{proxy_http}}"
    https_proxy: "{{proxy_https}}"

  tasks:

    - name: Instalando Docker
      yum:
        name: python-setuptools,docker
        state: present

    - name: Cria diretorio config do docker
      file: path=/etc/systemd/system/docker.service.d state=directory

    #- name: Cria arquivo config do docker para proxy http
    #  file: path=/etc/systemd/system/docker.service.d/http-proxy.conf state=touch

    #- name: Cria arquivo config do docker para proxy https
    #  file: path=/etc/systemd/system/docker.service.d/https-proxy.conf state=touch

    - lineinfile:
        path: /etc/sysconfig/docker
        regexp: '^OPTIONS'
        insertafter: '^#OPTIONS'
        line: 'OPTIONS=''--insecure-registry 172.30.0.0/16 --log-driver json-file --log-opt max-size=1M --log-opt max-file=3'''

    #- lineinfile:
    #    path: /etc/systemd/system/docker.service.d/http-proxy.conf
    #    line: '[Service]'

    #- lineinfile:
    #    path: /etc/systemd/system/docker.service.d/http-proxy.conf
    #    line: 'Environment="HTTP_PROXY={{proxy_http}}" "NO_PROXY={{no_proxy}}"'

    #- lineinfile:
    #    path: /etc/systemd/system/docker.service.d/https-proxy.conf
    #    line: '[Service]'

    #- lineinfile:
    #    path: /etc/systemd/system/docker.service.d/https-proxy.conf
    #    line: 'Environment="HTTPS_PROXY={{proxy_https}}" "NO_PROXY={{no_proxy}}"'

    - name: Restart docker
      systemd:
        state: restarted
        daemon_reload: yes
        name: docker

    - name: Verifica diretorio
      shell: pwd
      register: pwd

    # setenforce 0
    # firewall-cmd --zone=public --add-port=8443/tcp --permanent
    # firewall-cmd --reload

    - stat:
        path: "{{pwd.stdout}}/oc"
      register: binario

    - name: Download do utilitario oc (Openshift)
      unarchive:
        src: https://github.com/openshift/origin/releases/download/v3.7.0/openshift-origin-server-v3.7.0-7ed6862-linux-64bit.tar.gz
        dest: "{{pwd.stdout}}"
        remote_src: yes
      when: binario.stat.size == 0

    - copy:
        src: openshift-origin-server-v3.7.0-7ed6862-linux-64bit/oc
        dest: "{{pwd.stdout}}/oc"
      when: binario.stat.size == 0

    - name: Para o cluster se estiver ativo
      command: ./oc cluster down tse
      ignore_errors: yes

    - name: Limpa configuracao
      file: path=openshift-dir state=absent

    - name: Cria diretorio openshift
      file: path=openshift-dir state=directory

    - name: Inicia openshift cluster-up
      command: ./oc cluster up tse --public-hostname='{{ansible_default_ipv4.address}}' --use-existing-config --host-data-dir='{{pwd.stdout}}/openshift-dir' --host-pv-dir='{{pwd.stdout}}/openshift-dir'
      #command: ./oc cluster up tse --version=v3.6.173.0.5 --public-hostname='{{ansible_default_ipv4.address}}' --use-existing-config --host-data-dir='{{pwd.stdout}}/openshift-dir' --host-pv-dir='{{pwd.stdout}}/openshift-dir'
      when: http_proxy is undefined

    - name: Inicia openshift cluster-up (com proxy)
      command: ./oc cluster up tse --http-proxy='{{proxy_http}}' --https-proxy='{{proxy_https}}' --public-hostname='hostvars[inventory_hostname]['ansible_default_ipv4']['address']' --use-existing-config --host-data-dir='{{pwd.stdout}}/openshift-dir' --host-pv-dir='{{pwd.stdout}}/openshift-dir'
      #command: ./oc cluster up tse --version=v3.6.173.0.5 --http-proxy='{{proxy_http}}' --https-proxy='{{proxy_https}}' --public-hostname='hostvars[inventory_hostname]['ansible_default_ipv4']['address']' --use-existing-config --host-data-dir='{{pwd.stdout}}/openshift-dir' --host-pv-dir='{{pwd.stdout}}/openshift-dir'
      when: http_proxy is defined

    - name: Openshift login com o usuário de sistema
      shell: ./oc login https://{{ansible_default_ipv4.address}}:8443 -u system:admin

    - name: Importando imagem Mysql
      shell: ./oc import-image my-rhscl/mysql-57-rhel7 --from=registry.access.redhat.com/rhscl/mysql-57-rhel7 --confirm -n openshift || echo "Imagem ja existe"

    - name: Importando imagem do Fuse Integration Services
      shell: ./oc import-image my-jboss-fuse-6/fis-java-openshift --from=registry.access.redhat.com/jboss-fuse-6/fis-java-openshift --confirm -n openshift || echo "Imagem ja existe!"

    #- name: Baixando imagem do Mysql
    #  shell: docker pull registry.access.redhat.com/rhscl/mysql-57-rhel7

    #- name: Baixando imagem do Fuse Integration Services
    #  shell: docker pull registry.access.redhat.com/jboss-fuse-6/fis-java-openshift

    - name: Openshift login com usuário admin
      shell: ./oc login https://{{ansible_default_ipv4.address}}:8443 -u admin -p admin

    - name: Criando projeto fuse-tse
      shell: ./oc new-project fuse-tse --display-name='TSE Fuse Plano Saude' || echo "Projeto ja existe!"

    - name: Criando container Mysql
      shell: ./oc new-app -e MYSQL_USER=admin -e MYSQL_PASSWORD=redhat@123 -e MYSQL_DATABASE=srh2 -e MYSQL_ROOT_PASSWORD=redhat@123 --image-stream="openshift/mysql:5.7" --allow-missing-imagestream-tags || echo "Container ja existe"

    - name: Buscando container mysql
      shell: ./oc get po --no-headers | grep mysql | grep -v 'deploy' | cut -f1 -d ' '
      register: mysql_container
      until: mysql_container.stdout.find("mysql") != -1
      retries: 30
      delay: 20

    - name: Enviando o dump para dentro do container
      shell: ./oc exec -i {{mysql_container.stdout}} -- /opt/rh/rh-mysql57/root/usr/bin/mysql -uroot srh2  < dump/mysql-dump.sql || echo "Nao iniciado"
      register: sql_dump
      until: sql_dump.stdout.find("iniciado") == -1
      retries: 30
      delay: 20

    - name: Criando secret
      shell: ./oc secrets new-basicauth elvis-secret --username=elvis-redhat --password=redhat@123 || echo "Erro ao criar secret"

    - name: Adicionando secret
      shell: ./oc secrets add serviceaccount/builder secrets/elvis-secret || echo "Erro ao adicionar secret"

    #- name: Executando build da aplicação
    #  shell: /home/{{ansible_ssh_user}}/oc new-build fis-java-openshift~https://elvis-redhat@bitbucket.org/elvis-redhat/tse-fuse.git --build-secret elvis-secret || echo "Erro ao criar build"

    #- name: Acessando shell do container 
    # shell: /home/{{ansible_ssh_user}}/oc exec {{mysql_container.stdout}} -- /opt/rh/rh-mysql57/root/usr/bin/mysql --user=root srh2  < /tmp/mysql-dump.sql || echo "Nao iniciado"

    - name: Executando build do projeto fuse 
      shell: ./oc new-app fis-java-openshift~https://bitbucket.org/elvis-redhat/tse-fuse.git --source-secret elvis-secret -e HTTP_PROXY={{proxy_http}} -e HTTPS_PROXY={{proxy_https}}  || echo "Erro ao criar build"
    #  shell: /home/{{ansible_ssh_user}}/oc new-app fis-java-openshift~https://bitbucket.org/elvis-redhat/tse-fuse.git --source-secret elvis-secret || echo "Erro ao criar build"

    #- name: Importando dados para o mysql
    # shell: mysql -h 127.0.0.1 -P 3306 -u root -p < 'CREATE DATABASE srh2;'

    #- name: Importando 
    # shell: /home/{{ansible_ssh_user}}/oc 

    #- name: Importando 
    # shell: /home/{{ansible_ssh_user}}/oc 



